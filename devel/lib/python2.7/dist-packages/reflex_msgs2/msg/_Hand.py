# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_msgs2/Hand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import reflex_msgs2.msg

class Hand(genpy.Message):
  _md5sum = "d9d385c8f6333f652b7d358710209f43"
  _type = "reflex_msgs2/Hand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# message for ReFlex Hand
Finger[3] finger       # Hold out your right hand palm up, with pointer finger, middle finger and thumb extended
                       # Pointer = finger[0], Middle = finger[1], Thumb = finger[2]
Motor[4] motor         # Finger 1, Finger 2, Finger 3, and Preshape
Imu palmImu
#ImuCalibrationData LANCE

#CHANGE IMU TO ARRAY!!!
================================================================================
MSG: reflex_msgs2/Finger
# message for ReFlex Fingers
float32 proximal		# radians, measured from all open = 0, to pi = closed
float32 distal_approx   # radians, measured from all open = 0, to roughly pi = against proximal pad, relative to prox link

bool[14] contact			# binary, 0 = proximal, 8 = fingertip
float32[14] pressure		# scalar, dimensionless units, 0 = proximal, 8 = fingertip (can go negative)
Imu imu
================================================================================
MSG: reflex_msgs2/Imu
# quaternion reading from IMU (w, x, y, z)
float32[4] quat	
float32[3] euler_angles 

# these are defined in reflex_hand.h driver
uint8 calibration_status 
uint16[11] calibration_data

================================================================================
MSG: reflex_msgs2/Motor
float64 joint_angle
float64 raw_angle
float64 velocity
float64 load
float64 voltage
int32 temperature
string error_state
"""
  __slots__ = ['finger','motor','palmImu']
  _slot_types = ['reflex_msgs2/Finger[3]','reflex_msgs2/Motor[4]','reflex_msgs2/Imu']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       finger,motor,palmImu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.finger is None:
        self.finger = [reflex_msgs2.msg.Finger(),reflex_msgs2.msg.Finger(),reflex_msgs2.msg.Finger()]
      if self.motor is None:
        self.motor = [reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor()]
      if self.palmImu is None:
        self.palmImu = reflex_msgs2.msg.Imu()
    else:
      self.finger = [reflex_msgs2.msg.Finger(),reflex_msgs2.msg.Finger(),reflex_msgs2.msg.Finger()]
      self.motor = [reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor(),reflex_msgs2.msg.Motor()]
      self.palmImu = reflex_msgs2.msg.Imu()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.finger:
        _x = val1
        buff.write(_struct_2f.pack(_x.proximal, _x.distal_approx))
        buff.write(_struct_14B.pack(*val1.contact))
        buff.write(_struct_14f.pack(*val1.pressure))
        _v1 = val1.imu
        buff.write(_struct_4f.pack(*_v1.quat))
        buff.write(_struct_3f.pack(*_v1.euler_angles))
        buff.write(_struct_B.pack(_v1.calibration_status))
        buff.write(_struct_11H.pack(*_v1.calibration_data))
      for val1 in self.motor:
        _x = val1
        buff.write(_struct_5di.pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
        _x = val1.error_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_4f.pack(*self.palmImu.quat))
      buff.write(_struct_3f.pack(*self.palmImu.euler_angles))
      buff.write(_struct_B.pack(self.palmImu.calibration_status))
      buff.write(_struct_11H.pack(*self.palmImu.calibration_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.finger is None:
        self.finger = None
      if self.motor is None:
        self.motor = None
      if self.palmImu is None:
        self.palmImu = reflex_msgs2.msg.Imu()
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_msgs2.msg.Finger()
        _x = val1
        start = end
        end += 8
        (_x.proximal, _x.distal_approx,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 14
        val1.contact = _struct_14B.unpack(str[start:end])
        val1.contact = map(bool, val1.contact)
        start = end
        end += 56
        val1.pressure = _struct_14f.unpack(str[start:end])
        _v2 = val1.imu
        start = end
        end += 16
        _v2.quat = _struct_4f.unpack(str[start:end])
        start = end
        end += 12
        _v2.euler_angles = _struct_3f.unpack(str[start:end])
        start = end
        end += 1
        (_v2.calibration_status,) = _struct_B.unpack(str[start:end])
        start = end
        end += 22
        _v2.calibration_data = _struct_11H.unpack(str[start:end])
        self.finger.append(val1)
      self.motor = []
      for i in range(0, 4):
        val1 = reflex_msgs2.msg.Motor()
        _x = val1
        start = end
        end += 44
        (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _struct_5di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.error_state = str[start:end].decode('utf-8')
        else:
          val1.error_state = str[start:end]
        self.motor.append(val1)
      start = end
      end += 16
      self.palmImu.quat = _struct_4f.unpack(str[start:end])
      start = end
      end += 12
      self.palmImu.euler_angles = _struct_3f.unpack(str[start:end])
      start = end
      end += 1
      (self.palmImu.calibration_status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 22
      self.palmImu.calibration_data = _struct_11H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.finger:
        _x = val1
        buff.write(_struct_2f.pack(_x.proximal, _x.distal_approx))
        buff.write(val1.contact.tostring())
        buff.write(val1.pressure.tostring())
        _v3 = val1.imu
        buff.write(_v3.quat.tostring())
        buff.write(_v3.euler_angles.tostring())
        buff.write(_struct_B.pack(_v3.calibration_status))
        buff.write(_v3.calibration_data.tostring())
      for val1 in self.motor:
        _x = val1
        buff.write(_struct_5di.pack(_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature))
        _x = val1.error_state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.palmImu.quat.tostring())
      buff.write(self.palmImu.euler_angles.tostring())
      buff.write(_struct_B.pack(self.palmImu.calibration_status))
      buff.write(self.palmImu.calibration_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.finger is None:
        self.finger = None
      if self.motor is None:
        self.motor = None
      if self.palmImu is None:
        self.palmImu = reflex_msgs2.msg.Imu()
      end = 0
      self.finger = []
      for i in range(0, 3):
        val1 = reflex_msgs2.msg.Finger()
        _x = val1
        start = end
        end += 8
        (_x.proximal, _x.distal_approx,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 14
        val1.contact = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=14)
        val1.contact = map(bool, val1.contact)
        start = end
        end += 56
        val1.pressure = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=14)
        _v4 = val1.imu
        start = end
        end += 16
        _v4.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
        start = end
        end += 12
        _v4.euler_angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
        start = end
        end += 1
        (_v4.calibration_status,) = _struct_B.unpack(str[start:end])
        start = end
        end += 22
        _v4.calibration_data = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=11)
        self.finger.append(val1)
      self.motor = []
      for i in range(0, 4):
        val1 = reflex_msgs2.msg.Motor()
        _x = val1
        start = end
        end += 44
        (_x.joint_angle, _x.raw_angle, _x.velocity, _x.load, _x.voltage, _x.temperature,) = _struct_5di.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.error_state = str[start:end].decode('utf-8')
        else:
          val1.error_state = str[start:end]
        self.motor.append(val1)
      start = end
      end += 16
      self.palmImu.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.palmImu.euler_angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 1
      (self.palmImu.calibration_status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 22
      self.palmImu.calibration_data = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=11)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_11H = struct.Struct("<11H")
_struct_14f = struct.Struct("<14f")
_struct_2f = struct.Struct("<2f")
_struct_14B = struct.Struct("<14B")
_struct_4f = struct.Struct("<4f")
_struct_5di = struct.Struct("<5di")
_struct_3f = struct.Struct("<3f")
